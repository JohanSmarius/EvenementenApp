@page "/"

@using global::Shared
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.QuickGrid

@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>Home</PageTitle>

<h1>Overzicht evenementen</h1>

<div>
    <label>Filter op naam evenement: </label>
    <InputText id="NameFilter" @bind-Value="NameFilter" style="display: block; margin-bottom: 10px;" />
    <label>Filter op klantnaam: </label>
    <InputText id="customerFilter" @bind-Value="CustomerNameFilter" style="display: block;" />
</div>

<button class="btn btn-primary" @onclick="FilterHappenings">Filter</button>
<button class="btn btn-primary" @onclick="NavigateToAddEvent">Add Event</button>

@if (filteredHappenings == null)
{
    <p><em>Laden...</em></p>
}
else
{
    <QuickGrid Items="filteredHappenings.AsQueryable()" TGridItem="Happening" Class="grid">
        <PropertyColumn Property="@(e => e.Name)" Title="Naam evenement" Sortable="true" />
        <PropertyColumn Property="@(e => e.CustomerName)" Title="Opdrachtgever" Sortable="true" />
        <PropertyColumn Property="@(e => e.Address)" Title="Adres" Sortable="true" />
        <PropertyColumn Property="@(e => e.BeginDate)" Title="Begindatum" Sortable="true" />
        <PropertyColumn Property="@(e => e.EndDate)" Title="Einddatum" Sortable="true" />
        <TemplateColumn Title="Actions">
            <Template>
                <button class="btn btn-primary" @onclick="() => NavigateToEditEvent(context)">Edit</button>
                <button class="btn btn-danger" @onclick="() => SoftDeleteEvent(context)">Delete</button>
            </Template>
        </TemplateColumn>
    </QuickGrid>
}

@code {
    private List<Happening>? happenings = null;
    private List<Happening>? filteredHappenings = null;
    private string NameFilter { get; set; } = string.Empty;
    private string CustomerNameFilter { get; set; }= string.Empty;

    protected override async Task OnInitializedAsync()
    {
        happenings = await Http.GetFromJsonAsync<List<Happening>>("api/events");
        FilterHappenings();
    }

    private void FilterHappenings()
    {
        if (happenings == null)
        {
            filteredHappenings = null;
            return;
        }

        filteredHappenings = happenings
            .Where(h => h.Name.Contains(NameFilter, StringComparison.OrdinalIgnoreCase) &&
                        h.CustomerName.Contains(CustomerNameFilter, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private void NavigateToAddEvent()
    {
        Navigation.NavigateTo("/addevent");
    }

    private void NavigateToEditEvent(Happening happening)
    {
        Navigation.NavigateTo($"/editevent/{happening.id}");
    }

    private async Task SoftDeleteEvent(Happening happening)
    {
        var response = await Http.DeleteAsync($"api/softdeleteevent?id={happening.id}");
        if (response.IsSuccessStatusCode)
        {
            happenings.Remove(happening);
            FilterHappenings();
        }
        else
        {
            // Handle error
        }
    }
}
