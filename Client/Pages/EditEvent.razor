@page "/editevent/{id:guid}"

@using global::Shared
@using System.Net.Http
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ILogger<EditEvent> Logger

<PageTitle>Edit Event</PageTitle>

<h3>Edit Event</h3>

@if (eventToEdit == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@eventToEdit" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="name">Event Name</label>
            <InputText id="name" class="form-control" @bind-Value="eventToEdit.Name" />
        </div>
        <div class="form-group">
            <label for="customerName">Customer Name</label>
            <InputText id="customerName" class="form-control" @bind-Value="eventToEdit.CustomerName" />
        </div>
        <div class="form-group">
            <label for="address">Address</label>
            <InputText id="address" class="form-control" @bind-Value="eventToEdit.Address" />
        </div>
        <div class="form-group">
            <label for="beginDate">Begin Date</label>
            <InputDate id="beginDate" class="form-control" @bind-Value="eventToEdit.BeginDate" Type="InputDateType.DateTimeLocal" />
        </div>
        <div class="form-group">
            <label for="endDate">End Date</label>
            <InputDate id="endDate" class="form-control" @bind-Value="eventToEdit.EndDate" Type="InputDateType.DateTimeLocal" />
        </div>
        <div class="form-group">
            <label for="numberOfVolunteersNeededPerShift">Number of Volunteers Needed Per Shift</label>
            <InputNumber id="numberOfVolunteersNeededPerShift" class="form-control" @bind-Value="eventToEdit.NumberOfVolunteersNeededPerShift" />
        </div>

        <h4>Shifts</h4>
        @foreach (var shift in eventToEdit.Shifts)
        {
            <div class="shift">
                <div class="form-group">
                    <label for="shiftName">Shift Name</label>
                    <InputText id="shiftName" class="form-control" @bind-Value="shift.Name" />
                </div>
                <div class="form-group">
                    <label for="beginTime">Begin Time</label>
                    <InputDate id="beginTime" class="form-control" @bind-Value="shift.BeginTime" Type="InputDateType.DateTimeLocal" />
                </div>
                <div class="form-group">
                    <label for="endTime">End Time</label>
                    <InputDate id="endTime" class="form-control" @bind-Value="shift.EndTime" Type="InputDateType.DateTimeLocal" />
                </div>
                <div class="form-group">
                    <label for="numberOfVolunteersNeeded">Number of Volunteers Needed</label>
                    <InputNumber id="numberOfVolunteersNeeded" class="form-control" @bind-Value="shift.NumberOfVolunteersNeeded" />
                </div>
            </div>
        }

        <button type="button" class="btn btn-secondary" @onclick="AddShift">Add Shift</button>
        <button type="submit" class="btn btn-primary">Save Changes</button>
    </EditForm>
}

@code {
    [Parameter] public Guid id { get; set; }
    private Happening? eventToEdit;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            eventToEdit = await Http.GetFromJsonAsync<Happening>($"api/events/{id}");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading event");
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await Http.PutAsJsonAsync("api/updateevent", eventToEdit);
            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/");
            }
            else
            {
                // Handle error
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error updating event");
        }
    }

    private void AddShift()
    {
        eventToEdit.Shifts.Add(new Shift());
    }
}
