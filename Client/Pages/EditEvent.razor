@page "/editevent/{id:guid}"

@using global::Shared
@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.QuickGrid
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ILogger<EditEvent> Logger

<PageTitle>Edit Event</PageTitle>

<h3>Edit Event</h3>

@if (eventToEdit == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@eventToEdit" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="name">Event Name</label>
            <InputText id="name" class="form-control" @bind-Value="eventToEdit.Name" />
        </div>
        <div class="form-group">
            <label for="customerName">Customer Name</label>
            <InputText id="customerName" class="form-control" @bind-Value="eventToEdit.CustomerName" />
        </div>
        <div class="form-group">
            <label for="address">Address</label>
            <InputText id="address" class="form-control" @bind-Value="eventToEdit.Address" />
        </div>
        <div class="form-group">
            <label for="beginDate">Begin Date</label>
            <InputDate id="beginDate" class="form-control" @bind-Value="eventToEdit.BeginDate" Type="InputDateType.DateTimeLocal" />
        </div>
        <div class="form-group">
            <label for="endDate">End Date</label>
            <InputDate id="endDate" class="form-control" @bind-Value="eventToEdit.EndDate" Type="InputDateType.DateTimeLocal" />
        </div>
        <div class="form-group">
            <label for="numberOfVolunteersNeededPerShift">Number of Volunteers Needed Per Shift</label>
            <InputNumber id="numberOfVolunteersNeededPerShift" class="form-control" @bind-Value="eventToEdit.NumberOfVolunteersNeededPerShift" />
        </div>

        <button type="submit" class="btn btn-primary">Save Changes</button>
    </EditForm>

    <h3>Shifts</h3>
    <QuickGrid Items="eventToEdit.Shifts.AsQueryable()" TGridItem="Shift" class="Grid">
        <PropertyColumn Property="@(s => s.Name)" Title="Name" Sortable="true" />
        <PropertyColumn Property="@(s => s.BeginTime)" Title="Begin Time" Sortable="true" />
        <PropertyColumn Property="@(s => s.EndTime)" Title="End Time" Sortable="true" />
        <PropertyColumn Property="@(s => s.NumberOfVolunteersNeeded)" Title="Volunteers Needed" Sortable="true" />
        <TemplateColumn Title="Volunteers">
            <ul>
                @foreach (var volunteer in context.AssignedVolunteers)
                {
                    <li>@volunteer.Name</li>
                }
            </ul>
        </TemplateColumn>
        <TemplateColumn Title="Actions">
            <div class="form-group">
                <label for="volunteers">Select Volunteers</label>
                <InputSelect id="volunteers" class="form-control" @bind-Value="selectedVolunteerId">
                    <option value="">Select a volunteer</option>
                    @foreach (var volunteer in volunteers)
                    {
                        <option value="@volunteer.Id">@volunteer.Name</option>
                    }
                </InputSelect>
                <button class="btn btn-primary" @onclick="() => InviteVolunteerToShift(context)">Invite</button>
            </div>
        </TemplateColumn>
    </QuickGrid>

    <button class="btn btn-primary" @onclick="NavigateToAddShift">Add Shift</button>
}

@code {
    [Parameter] public Guid id { get; set; }
    private Happening? eventToEdit;
    private List<Volunteer> volunteers = new List<Volunteer>();
    private string selectedVolunteerId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            eventToEdit = await Http.GetFromJsonAsync<Happening>($"api/events/{id}");
            volunteers = await Http.GetFromJsonAsync<List<Volunteer>>("api/volunteers");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading event or volunteers");
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await Http.PutAsJsonAsync("api/updateevent", eventToEdit);
            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/");
            }
            else
            {
                // Handle error
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error updating event");
        }
    }

    private void NavigateToAddShift()
    {
        Navigation.NavigateTo($"/addshift/{id}");
    }

    private void InviteVolunteerToShift(Shift shift)
    {
        var selectedVolunteer = volunteers.FirstOrDefault(v => v.Id == selectedVolunteerId);
        if (selectedVolunteer != null)
        {
            shift.AssignedVolunteers.Add(selectedVolunteer);
        }
    }
}
